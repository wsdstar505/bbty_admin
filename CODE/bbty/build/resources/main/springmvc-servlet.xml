<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans     
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- 它背后注册了很多用于解析注解的处理器,其中就包括<context:annotation-config/>配置的注解所使用的处理器 -->  
    <!-- 所以配置了<context:component-scan base-package="">之后,便无需再配置<context:annotation-config> -->  
	<!-- 对包中的所有类进行自动扫描，以完成Bean创建和自动依赖注入的功能 -->
	<!-- 这个必须配置在mvc的xml里面 -->
	<context:component-scan base-package="com.bbty.*" />
	
	<!-- 1、当两种标签都没有的时候，框架默认注册的有AnnotationMethodHandlerAdapter这个bean， 所以能够处理@RequestMapping这个注解 
		 2、只有<mvc:default-servlet-handler/>时 所注册的bean都不能处理@RequestMapping注解，因此无法找到相应的Controller， 
		进而无法进行访问路径的映射 
		 3、当两种标签都有的时候， <mvc:annotation-driven/>会注册一个RequestMappingHandlerAdapter的bean， 
		这个bean能够处理@RequestMapping这个注解 -->
	<!-- 启用SpringMVC的注解功能,它会自动注册HandlerMapping、HandlerAdapter、ExceptionResolver的相关实例 -->  
    <mvc:annotation-driven/>  
    
	<!-- 兼容tomcat和resin -->
	<mvc:default-servlet-handler />
	
	<!-- 由于web.xml中设置是：由SpringMVC拦截所有请求,于是在读取静态资源文件的时候就会受到影响(说白了就是读不到) -->  
    <!-- 经过下面的配置，该标签的作用就是：所有页面中引用"/js/**"的资源，都会从"/resources/js/"里面进行查找 -->  
    <!-- 我们可以访问http://IP:8080/xxx/js/my.css和http://IP:8080/xxx/resources/js/my.css对比出来 -->
	<!-- 
		<mvc:resources mapping="/vendor/**" location="./vendor/" />
		<mvc:resources mapping="/dist/**" location="./dist/" />
 	-->
	
	<!-- 配置SpringMVC的视图解析器 -->  
	<bean id="internalResourceViewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<!-- 页面类型 -->
		<property name="contentType" value="text/html;charset=UTF-8" />
		<!-- 前缀 -->
		<property name="prefix" value="/WEB-INF/views/" />
		<!-- 后缀 -->
		<property name="suffix" value=".jsp" />
	</bean>

    <!-- SpringMVC在超出上传文件限制时，会抛出org.springframework.web.multipart.MaxUploadSizeExceededException -->  
    <!-- 该异常是SpringMVC在检查上传的文件信息时抛出来的，而且此时还没有进入到Controller方法中 -->  
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">  
        <property name="exceptionMappings">  
            <props>  
                <!-- 遇到MaxUploadSizeExceededException异常时，自动跳转到/WEB-INF/error_fileupload.jsp页面 -->  
                <prop key="org.springframework.web.multipart.MaxUploadSizeExceededException">WEB-INF/error_fileupload</prop>  
                <!-- 处理其它异常(包括Controller抛出的) -->  
                <prop key="java.lang.Throwable">WEB-INF/500</prop>  
            </props>  
        </property>  
    </bean>
    
    <!-- 默认访问跳转到登录页面(即定义无需Controller的url<->view直接映射) -->  
     <!-- <mvc:view-controller path="/" view-name="forward:/WEB-INF/views/login.jsp"/>-->  
    
</beans>